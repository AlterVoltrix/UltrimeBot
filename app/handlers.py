from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

import app.keyboards as kb
import app.database.requests as rq

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
<<<<<<< HEAD
    await rq.set_user(message.from_user.id)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∫—Ä–æ—Å—Å–æ–≤–æ–∫!', reply_markup=kb.main)


@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', reply_markup=await kb.categories())
=======
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    main_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–¢–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã FAQ')],
            [KeyboardButton(text='–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞'), KeyboardButton(text='–û–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö')]
        ],
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª...'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —è UltrimeBot. –ü–æ–º–æ–≥–∞—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º, –ø—Ä–æ—à–∏–≤–∫–∞–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–π.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
        reply_markup=main_kb
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.callback_query(F.data == "back_to_main")
async def back_handler(callback: CallbackQuery):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await callback.message.answer(
        "",
        reply_markup=kb.main
    )
    await callback.answer()
# –†–∞–∑–¥–µ–ª FAQ
@router.message(F.text == '–¢–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã FAQ')
async def faq_menu(message: Message):
    await message.answer("–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", reply_markup=kb.catalog)

# –†–∞–∑–¥–µ–ª "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞" (—Å—Å—ã–ª–∫–∏)
@router.message(F.text == '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞')
async def guides_menu(message: Message):
    await message.answer("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞:", reply_markup=kb.guides)

# –†–∞–∑–¥–µ–ª "–û–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö"
@router.message(F.text == '–û–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö')
async def devices_menu(message: Message):
    await message.answer("üì± –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=kb.devices)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—à–∞–±–ª–æ–Ω—ã)
@router.callback_query(F.data.startswith('device_'))
async def device_info(callback: CallbackQuery):
    model = callback.data.split('_')[1].upper()
    info = {
        'mrxxx': "MRXXX:\n\n‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 1\n‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 2\n‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ...",
        'cs21xx': "CS21XX:\n",
        'cs41xx': "CS41XX:\n",
        'cs61xx': "CS61XX:\n",
        'cs62xx': "CS62XX:\n",
        'cs63xx': "CS63XX:\n",
        'cs71xx': "CS71XX:\n",
        # –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
    }.get(model.lower(), "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!")
    
    await callback.message.answer(info)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FAQ (–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä)
@router.callback_query(F.data == 'WordUltrime')
async def WordUltrime(callback: CallbackQuery):
    await callback.message.answer(
   """
   –ü–ª–∞–Ω —Ä–∞–±–æ—Ç—ã Ultrime: \n
   1. –ù–∞–∂–º–∏—Ç–µ –¥–≤–∞ —Ä–∞–∑–∞ –õ–ö–ú –Ω–∞ –∑–Ω–∞—á–æ–∫ Ultrime \n
   2. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞ '127.0.0.1:8080' \n
   3. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ \n
   4. –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ—à–∏–≤–∫–∏ \n
   5. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ COM-–ø–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É \n
   6. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ä—Ç' \n
"""


   )
    await callback.answer()
    
@router.callback_query(F.data == "TwoDevices")
async def TwoDevices(callback : CallbackQuery):
    await callback.message.answer(
   """
–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ—à–∏–≤–∞—Ç—å 2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?

–î–∞, —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏–π:
- –ù–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 COM-–ø–æ—Ä—Ç–æ–≤
- –ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É COM-–ø–æ—Ä—Ç—É
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å COM-–ø—Ä–æ—Ç—ã
- –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—à–∏–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ—à–∏–≤–∫—É –æ–¥–Ω–æ–≥–æ —Å —Å–≤—è–∑–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ–º—ã –æ—à–∏–±–∫–∞–º–∏
"""
    )

    await callback.answer()
@router.callback_query(F.data == "Error")
async def Error(callback: CallbackQuery):
    await callback.message.answer(
        """
–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –ø—Ä–æ—à–∏–≤–∫–∞ —Å–±–∏–ª–∞—Å—å –Ω–∞ –ø–æ–ª–ø—É—Ç–∏?

1. –ù–µ –ø–∞–Ω–∏–∫—É–π—Ç–µ –∏ –Ω–µ –æ—Ç–∫–ª—é—á–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.
2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—à–∏–≤–∫—É —Å —Ç–æ–≥–æ —ç—Ç–∞–ø–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—Å–µ —Å–±–∏–ª–æ—Å—å.
3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É –∑–∞–Ω–æ–≤–æ.
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å COM-–ø–æ—Ä—Ç–∞.
5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π COM-–ø–æ—Ä—Ç.
6. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º Ultrime.
"""
    )
    await callback.answer()
>>>>>>> 4caafee9cae53ad436a5f4852d10965fd12aabbf


@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                  reply_markup=await kb.items(callback.data.split('_')[1]))


@router.callback_query(F.data.startswith('item_'))
async def category(callback: CallbackQuery):
    item_data = await rq.get_item(callback.data.split('_')[1])
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä')
    await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item_data.name}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item_data.description}\n–¶–µ–Ω–∞: {item_data.price}$')